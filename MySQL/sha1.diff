--- ./sha1.cpp	2010-04-25 16:11:21.000000000 -0400
+++ /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha1.cpp	2012-05-25 10:04:59.000000000 -0400
@@ -3,8 +3,6 @@
 #include <avr/pgmspace.h>
 #include "sha1.h"
 
-#include "debugstuff.c"
-
 #define SHA1_K0 0x5a827999
 #define SHA1_K20 0x6ed9eba1
 #define SHA1_K40 0x8f1bbcdc
@@ -75,11 +73,17 @@
   }
 }
 
-void Sha1Class::write(uint8_t data) {
+size_t Sha1Class::write(uint8_t data) {
   ++byteCount;
   addUncounted(data);
 }
 
+size_t Sha1Class::write(uint8_t* data, int length) {
+  for (int i=0; i<length; i++) {
+    write(data[i]);
+  }
+}
+
 void Sha1Class::pad() {
   // Implement SHA-1 padding (fips180-2 ยง5.1.1)
 
Only in .: sha1.diff
diff -u ./sha1.h /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha1.h
--- ./sha1.h	2010-04-25 15:53:10.000000000 -0400
+++ /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha1.h	2012-05-25 10:04:13.000000000 -0400
@@ -23,7 +23,8 @@
     void initHmac(const uint8_t* secret, int secretLength);
     uint8_t* result(void);
     uint8_t* resultHmac(void);
-    virtual void write(uint8_t);
+    virtual size_t write(uint8_t);
+    virtual size_t write(uint8_t* data, int length);
     using Print::write;
   private:
     void pad();
diff -u ./sha256.cpp /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha256.cpp
--- ./sha256.cpp	2010-04-25 16:14:28.000000000 -0400
+++ /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha256.cpp	2012-05-25 10:05:55.000000000 -0400
@@ -90,7 +90,7 @@
   }
 }
 
-void Sha256Class::write(uint8_t data) {
+size_t  Sha256Class::write(uint8_t data) {
   ++byteCount;
   addUncounted(data);
 }
diff -u ./sha256.h /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha256.h
--- ./sha256.h	2010-04-25 16:04:49.000000000 -0400
+++ /Volumes/Macintosh_Data/cbell/Documents/Arduino/libraries/sha1/sha256.h	2012-05-25 10:05:45.000000000 -0400
@@ -23,7 +23,7 @@
     void initHmac(const uint8_t* secret, int secretLength);
     uint8_t* result(void);
     uint8_t* resultHmac(void);
-    virtual void write(uint8_t);
+    virtual size_t  write(uint8_t);
     using Print::write;
   private:
     void pad();
